import React, { useState, useEffect } from "react";
import { AiOutlineArrowRight } from "react-icons/ai";
import { FaCalendarAlt } from "react-icons/fa";

function GetQuote({ tour }) {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    mobile: "",
    countryCode: "+94", // Default country code
    livingCountry: "",
    nationality: "",
    destination: "",
    arrivalDate: "",
    departureDate: "",
    packageType: "gold", // Default package type
    totalPrice: 0, // Initial total price
  });

  const [countryCodes, setCountryCodes] = useState([]);
  const [countries, setCountries] = useState([]);
  const [filteredCountries, setFilteredCountries] = useState([]);
  const [inclusions, setInclusions] = useState([]); // Define inclusions state
  const [error, setError] = useState(null);

  useEffect(() => {
    // Fetch country codes dynamically from an API
    const fetchCountryCodes = async () => {
      try {
        const response = await fetch("https://restcountries.com/v3.1/all");
        const countriesData = await response.json();

        const codes = countriesData.map((country) => ({
          code: country.idd?.root + (country.idd?.suffixes?.[0] || ""),
          name: country.name.common,
        }));
        setCountryCodes(codes.filter((c) => c.code)); // Filter out entries without codes
        setCountries(countriesData.map((c) => c.name.common).sort()); // Extract sorted country names
      } catch (error) {
        console.error("Failed to fetch country codes:", error);
      }
    };

    fetchCountryCodes();
  }, []);

  useEffect(() => {
    // Fetch inclusions for the tour
    if (tour?._id) {
      const fetchInclusions = async () => {
        try {
          const response = await fetch(
            `http://localhost:5000/api/inclusion/tour/${tour._id}`
          );
          if (response.ok) {
            const data = await response.json();
            console.log("Fetched inclusions:", data); // Log the inclusions data
            setInclusions(data); // Set inclusions in state
          } else {
            setError("Unable to load inclusions. Please try again later.");
          }
        } catch (err) {
          console.error("Error fetching inclusions:", err);
        }
      };

      fetchInclusions();
    }
  }, [tour?._id]);

  // Function to handle package selection
  const handlePackageSelect = (packageType, price) => {
    setFormData((prevData) => ({
      ...prevData,
      packageType: packageType, // Update the selected package
      totalPrice: price, // Update the total price based on the selected package
    }));
  };

  const handleSubmit = async () => {
    try {
      const fullMobileNumber = `${formData.countryCode}${formData.mobile}`;
      const payload = { ...formData, mobile: fullMobileNumber };

      const response = await fetch("http://localhost:5000/api/bookings", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (response.ok) {
        alert("Booking created successfully!");
      } else {
        alert("Failed to create booking.");
      }
    } catch (error) {
      console.error("Error:", error);
    }
  };

  return (
    <div className="bg-white border border-blue-700 p-6 w-full mt-8 rounded-xl shadow-lg">
      <h2 className="text-xl font-semibold text-blue-700 mb-4">
        Personal Details
      </h2>
      <div className="space-y-4">{/* Input Fields */}</div>
      <h2 className="text-xl font-semibold text-blue-700 mt-8 mb-4">
        Tour Details
      </h2>
      <div className="space-y-4">
        <label>Arrival Date:</label>
        <input
          type="date"
          name="arrivalDate"
          value={formData.arrivalDate}
          onChange={(e) =>
            setFormData({ ...formData, arrivalDate: e.target.value })
          }
          className="w-full border p-3 rounded-lg"
        />
        <label>Departure Date:</label>
        <input
          type="date"
          name="departureDate"
          value={formData.departureDate}
          onChange={(e) =>
            setFormData({ ...formData, departureDate: e.target.value })
          }
          className="w-full border p-3 rounded-lg"
        />
      </div>

      <div>
        <h2 className="text-xl font-semibold text-blue-700 mt-8 mb-4">
          Package Details
        </h2>
        <div className="space-y-2">
          {/* Display package types with prices and radio buttons */}
          {inclusions
            .filter((inclusion) => inclusion.price !== undefined) // Filter out packages with undefined price
            .map((inclusion, idx) => (
              <div key={idx} className="flex items-center space-x-2">
                <input
                  type="radio"
                  id={inclusion.packageType}
                  name="packageType"
                  value={inclusion.packageType}
                  checked={formData.packageType === inclusion.packageType}
                  onChange={() =>
                    handlePackageSelect(inclusion.packageType, inclusion.price)
                  }
                  className="mr-2"
                />
                <label htmlFor={inclusion.packageType}>
                  {inclusion.packageType}
                </label>
              </div>
            ))}
        </div>
        <div className="mt-4 flex justify-between">
          <span>Total Price:</span>
          <span>${formData.totalPrice}</span>
        </div>
      </div>
      <button
        onClick={handleSubmit}
        className="w-full py-3 bg-blue-700 text-white rounded-lg flex items-center justify-center gap-2"
      >
        <AiOutlineArrowRight />
        <span>Get Quote</span>
      </button>
    </div>
  );
}

export default GetQuote;
